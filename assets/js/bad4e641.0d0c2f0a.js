"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[552],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,g=p["".concat(o,".").concat(d)]||p[d]||y[d]||i;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var r=n(8168),a=n(8587),i=(n(6540),n(5680)),l=["components"],s={id:"attributes",title:"Attributes",sidebar_label:"Attributes"},o=void 0,u={unversionedId:"attributes",id:"attributes",title:"Attributes",description:"Attributes allow you to specify which record attributes you want to serialize,",source:"@site/docs/attributes.md",sourceDirName:".",slug:"/attributes",permalink:"/attributes",draft:!1,tags:[],version:"current",frontMatter:{id:"attributes",title:"Attributes",sidebar_label:"Attributes"},sidebar:"docs",previous:{title:"Design Choices",permalink:"/design-choices"},next:{title:"Associations",permalink:"/associations"}},c={},p=[{value:"Field Attributes",id:"field-attributes",level:2},{value:"Method Attributes",id:"method-attributes",level:2},{value:"Filters",id:"filters",level:2},{value:"Filters For",id:"filters-for",level:2},{value:"Aliases",id:"aliases",level:2}],y={toc:p},d="wrapper";function g(e){var t=e.components,n=(0,a.A)(e,l);return(0,i.yg)(d,(0,r.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Attributes allow you to specify which record attributes you want to serialize,\nThere are two types of attributes:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Field - simple columns defined on the record it self."),(0,i.yg)("li",{parentName:"ul"},"Virtual/Method - this allows to include properties beyond simple fields.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},'\nclass UserSerializer < Panko::Serializer\n  attributes :full_name\n\n  def full_name\n    "#{object.first_name} #{object.last_name}"\n   end\nend\n\n')),(0,i.yg)("h2",{id:"field-attributes"},"Field Attributes"),(0,i.yg)("p",null,"Using field attributes you can control which columns of the given ActiveRecord object you want to serialize."),(0,i.yg)("p",null,"Instead of relying ActiveRecord to do it's type casting, Panko does on it's own for performance reasons (read more in ",(0,i.yg)("a",{parentName:"p",href:"/design-choices#type-casting"},"Design Choices"),")."),(0,i.yg)("h2",{id:"method-attributes"},"Method Attributes"),(0,i.yg)("p",null,"Method attributes are used when your serialized values can be derived from the object you are serializing."),(0,i.yg)("p",null,"The serializer's attribute methods can access the object being serialized as ",(0,i.yg)("inlineCode",{parentName:"p"},"object")," -"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},'\nclass PostSerializer < Panko::Serializer\n  attributes :author_name\n\n  def author_name\n    "#{object.author.first_name} #{object.author.last_name}"\n  end\nend\n\n')),(0,i.yg)("p",null,"Another useful, thing you can pass your serializer is ",(0,i.yg)("inlineCode",{parentName:"p"},"context"),", a ",(0,i.yg)("inlineCode",{parentName:"p"},"context")," is a bag of data whom your serializer may need."),(0,i.yg)("p",null,"For example, here we will pass feature flags:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass UserSerializer < Panko::Serializer\n  attributes :id, :email\n\n  def feature_flags\n    context[:feature_flags]\n  end\nend\n\nserializer = UserSerializer.new(context: {\n  feature_flags: FeatureFlags.all\n})\n\nserializer.serialize(User.first)\n\n")),(0,i.yg)("h2",{id:"filters"},"Filters"),(0,i.yg)("p",null,"Filters allows us to reduce the amount of attributes we can serialize, therefore reduce the data usage & performance of serializing."),(0,i.yg)("p",null,"There are two types of filters:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"only - use those attributes ",(0,i.yg)("strong",{parentName:"li"},"only")," and nothing else"),(0,i.yg)("li",{parentName:"ul"},"except - all attributes ",(0,i.yg)("strong",{parentName:"li"},"except")," those attributes")),(0,i.yg)("p",null,"Usage example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass UserSerializer < Panko::Serializer\n  attributes :id, :name, :email\nend\n\n# this line will return { 'name': '..' }\nUserSerializer.new(only: [:name]).serialize(User.first)\n\n# this line will return { 'id': '..', 'email': ... }\nUserSerializer.new(except: [:name]).serialize(User.first)\n\n")),(0,i.yg)("p",null,">"," ",(0,i.yg)("strong",{parentName:"p"},"Note")," that if you want to user filter on an associations, the ",(0,i.yg)("inlineCode",{parentName:"p"},":name"),"\n",">"," property is not taken into account.\n",">"," If you have a ",(0,i.yg)("inlineCode",{parentName:"p"},"has_many :state_transitions, name: :history")," association\n",">"," defined, the key to use in filters is ",(0,i.yg)("inlineCode",{parentName:"p"},":state_transitions"),"\n",">"," (e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"{ except: [:state_transitions] }"),")"),(0,i.yg)("h2",{id:"filters-for"},"Filters For"),(0,i.yg)("p",null,"Sometimes you find yourself have the same filtering logic in actions in order to\nsolve this duplication, Panko allows you to write the filters in the serializer."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass UserSerializer < Panko::Serializer\n  attributes :id, :name, :email\n\n  def self.filters_for(context, scope)\n    {\n      only: [:name]\n    }\n  end\nend\n\n# this line will return { 'name': '..' }\nUserSerializer.serialize(User.first)\n\n")),(0,i.yg)("p",null,">"," See discussion in: https:"),(0,i.yg)("h2",{id:"aliases"},"Aliases"),(0,i.yg)("p",null,"Let's say we have attribute name that we want to expose to client as different name, the current way of doing so is using method attribute, for example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},"\n\n\n")),(0,i.yg)("p",null,"The downside of this approach is that `` skips Panko's type casting, therefore we get direct hit on performance."),(0,i.yg)("p",null,"To fix this, we can use aliases -"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ruby"},"\n\n\n")))}g.isMDXComponent=!0}}]);