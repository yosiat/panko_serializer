"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>g});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),p=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),y=o,g=u["".concat(i,".").concat(y)]||u[y]||d[y]||s;return r?t.createElement(g,a(a({ref:n},c),{},{components:r})):t.createElement(g,a({ref:n},c))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=y;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<s;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},8264:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var t=r(8168),o=r(8587),s=(r(6540),r(5680)),a=["components"],l={id:"response-bag",title:"Response",sidebar_label:"Response"},i=void 0,p={unversionedId:"response-bag",id:"response-bag",title:"Response",description:"Let's say you have some JSON payload which can is constructed using Panko serialization result,",source:"@site/docs/response-bag.md",sourceDirName:".",slug:"/response-bag",permalink:"/docs/response-bag",draft:!1,tags:[],version:"current",frontMatter:{id:"response-bag",title:"Response",sidebar_label:"Response"},sidebar:"docs",previous:{title:"Associations",permalink:"/docs/associations"}},c={},u=[{value:"JsonValue",id:"jsonvalue",level:2}],d={toc:u},y="wrapper";function g(e){var n=e.components,r=(0,o.A)(e,a);return(0,s.yg)(y,(0,t.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Let's say you have some JSON payload which can is constructed using Panko serialization result,\nlike this:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass PostsController < ApplicationController\n  def index\n   posts = Post.all\n   render json: {\n     success: true,\n     total_count: posts.count,\n     posts: Panko::ArraySerializer.new(posts, each_serializer: PostSerializer).to_json\n   }\n  end\nend\n\n")),(0,s.yg)("p",null,"The output of the above will be json string (for ",(0,s.yg)("inlineCode",{parentName:"p"},"posts"),") inside json string and this were ",(0,s.yg)("inlineCode",{parentName:"p"},"Panko::Response")," shines."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass PostsController < ApplicationController\n  def index\n   posts = Post.all\n   render json: Panko::Response.new(\n     success: true,\n     total_count: posts.count,\n     posts: Panko::ArraySerializer.new(posts, each_serializer: PostSerializer)\n   )\n  end\nend\n\n")),(0,s.yg)("p",null,"And everything will work as expected!"),(0,s.yg)("p",null,"For a single object serialization, we need to use a different API (since ",(0,s.yg)("inlineCode",{parentName:"p"},"Panko::Serializer")," don't accept an object in it's constructor):"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass PostsController < ApplicationController\n  def show\n    post = Post.find(params[:id])\n\n    render(\n      json: Panko::Response.create do |r|\n        {\n          success: true,\n          post: r.serializer(post, PostSerializer)\n        }\n      end\n    )\n  end\nend\n\n")),(0,s.yg)("h2",{id:"jsonvalue"},"JsonValue"),(0,s.yg)("p",null,"Let's take the above example further, we serialized the posts and cached it as JSON string in our Cache.\nNow, you can wrap the cached value with ",(0,s.yg)("inlineCode",{parentName:"p"},"Panko::JsonValue"),", like here -"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ruby"},'\nclass PostsController < ApplicationController\n  def index\n   posts = Cache.get("/posts")\n\n   render json: Panko::Response.new(\n     success: true,\n     total_count: posts.count,\n     posts: Panko::JsonValue.from(posts)\n   )\n  end\nend\n\n')))}g.isMDXComponent=!0}}]);