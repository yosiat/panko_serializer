"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[924],{5680:(e,r,n)=>{n.d(r,{xA:()=>u,yg:()=>y});var t=n(6540);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,y=p["".concat(s,".").concat(d)]||p[d]||g[d]||a;return n?t.createElement(y,l(l({ref:r},u),{},{components:n})):t.createElement(y,l({ref:r},u))}));function y(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4902:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var t=n(8168),i=n(8587),a=(n(6540),n(5680)),l=["components"],o={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},s=void 0,c={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Installation",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/getting-started",draft:!1,tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Performance",permalink:"/performance"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Creating your first serializer",id:"creating-your-first-serializer",level:2},{value:"Serializing an object",id:"serializing-an-object",level:3},{value:"Using the serializers in a controller",id:"using-the-serializers-in-a-controller",level:3}],g={toc:p},d="wrapper";function y(e){var r=e.components,n=(0,i.A)(e,l);return(0,a.yg)(d,(0,t.A)({},g,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("p",null,"To install Panko, all you need is to add it to your Gemfile:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},'\ngem "panko_serializer"\n\n')),(0,a.yg)("p",null,"Then, install it on the command line:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"\n bundle install\n\n")),(0,a.yg)("h2",{id:"creating-your-first-serializer"},"Creating your first serializer"),(0,a.yg)("p",null,"Let's create serializer and use it inside Rails controller."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"class PostSerializer < Panko::Serializer\n  attributes :title\nend\n\nclass UserSerializer < Panko::Serializer\n  attributes :id, :name, :age\n\n  has_many :posts, serializer: PostSerializer\nend\n")),(0,a.yg)("h3",{id:"serializing-an-object"},"Serializing an object"),(0,a.yg)("p",null,"And now serialize a single object"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"\n# Using Oj serializer\nPostSerializer.new.serialize_to_json(Post.first)\n\n# or, similar to #serializable_hash\nPostSerializer.new.serialize(Post.first).to_json\n\n")),(0,a.yg)("h3",{id:"using-the-serializers-in-a-controller"},"Using the serializers in a controller"),(0,a.yg)("p",null,"As you can see, defining serializers is simple and resembles ActiveModelSerializers 0.9,\nTo utilize the ",(0,a.yg)("inlineCode",{parentName:"p"},"UserSerializer")," inside a Rails controller and serialize some users, all we need to do is:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"\nclass UsersController < ApplicationController\n def index\n   users = User.includes(:posts).all\n   render json: Panko::ArraySerializer.new(users, each_serializer: UserSerializer).to_json\n end\nend\n\n")),(0,a.yg)("p",null,"And voila, we have endpoint which serialize users using Panko!"))}y.isMDXComponent=!0}}]);